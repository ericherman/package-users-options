#!/bin/bash

function configure_commands()
{
  cd ~/xvid*/build/generic &&
  ./configure \
    --prefix=/usr
}

function make_commands()
{
  cd ~/xvid*/build/generic &&
  make
}

function test_commands()
{
  echo "no make check"
}

function install_commands()
{
  cd build/generic &&
  make install &&
  chmod -v 755 /usr/lib/libxvidcore.so.4.3 &&
  ln -v -sf libxvidcore.so.4.3 /usr/lib/libxvidcore.so.4 &&
  ln -v -sf libxvidcore.so.4   /usr/lib/libxvidcore.so   &&
  install -v -m755 -d /usr/share/doc/xvidcore-1.3.2/examples &&
  install -v -m644 ../../doc/* /usr/share/doc/xvidcore-1.3.2 &&
  install -v -m644 ../../examples/* \
    /usr/share/doc/xvidcore-1.3.2/examples &&
  echo "INSTALL COMPLETE"
}


# override CFLAGS, CXXFLAGS, or other environment variables here
# as needed.
#
# If the package needs to be built from a directory other than
# the source directory, set BUILD_DIR appropriately (for example:
# 'export BUILD_DIR=../build-binutils')
#
# You may copy a source tarball into a "src" subdirectory, and
# put patches into a "patches" subdirectory, in which case the
# build script will unpack and patch the source for you.
# Alternatively, you can prepare the source yourself (and cd into
# the source directory) before running build.
#
# If necessary, redefine the build functions:
#   configure_commands, make_commands, test_commands, install_commands
#
# If this package has external dependencies, such as requiring
# special users or groups to exist, verify that the dependencies
# are met in initial_checkup (echo problem notifications and exit
# if they are not).
#
# Look at ~/.bash_profile for syntax help.  Re-source the options
# file afterward!
#
# Run "declare -f" to find out the current function definitions.
#
