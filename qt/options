#!/bin/bash

# The method recommended by the Qt developers does not use the /usr directory prefix. It has the advantage of keeping all the package files consolidated in a dedicated directory hierarchy. By using this method, an update can be made without overwriting a previous installation and users can easily revert to a previous version by changing one symbolic link.

# The Qt developers use a default location of /usr/local/qt/, however the procedure below puts the files in /opt/qt-4.8.1/ and then creates a symbolic link to /opt/qt/.


function configure_commands()
{
  sed -i '/-Werror/d' src/3rdparty/webkit/Source/WebKit.pri &&
  ./configure \
            -prefix /opt/qt-4.8.1  \
            -release               \
            -nomake examples       \
            -nomake demos          \
            -system-sqlite         \
            -no-nis                \
            -opensource            \
            -confirm-license
}

function make_commands()
{
  make
}

function test_commands()
{
  make -k check || echo "DARN $? .... Oh, well."
}

function install_commands()
{
  make install &&
  ln -svfn qt-4.8.1 /opt/qt &&
  echo "INSTALL COMPLETE"
}


# override CFLAGS, CXXFLAGS, or other environment variables here
# as needed.
#
# If the package needs to be built from a directory other than
# the source directory, set BUILD_DIR appropriately (for example:
# 'export BUILD_DIR=../build-binutils')
#
# You may copy a source tarball into a "src" subdirectory, and
# put patches into a "patches" subdirectory, in which case the
# build script will unpack and patch the source for you.
# Alternatively, you can prepare the source yourself (and cd into
# the source directory) before running build.
#
# If necessary, redefine the build functions:
#   configure_commands, make_commands, test_commands, install_commands
#
# If this package has external dependencies, such as requiring
# special users or groups to exist, verify that the dependencies
# are met in initial_checkup (echo problem notifications and exit
# if they are not).
#
# Look at ~/.bash_profile for syntax help.  Re-source the options
# file afterward!
#
# Run "declare -f" to find out the current function definitions.
#
